{"version":3,"file":"index.modern.mjs","sources":["../src/index.ts"],"sourcesContent":["// symbols\nconst TRACK_MEMO_SYMBOL = Symbol();\nconst GET_ORIGINAL_SYMBOL = Symbol();\n\n// properties\nconst AFFECTED_PROPERTY = 'a';\nconst FROZEN_PROPERTY = 'f';\nconst PROXY_PROPERTY = 'p';\nconst PROXY_CACHE_PROPERTY = 'c';\nconst NEXT_OBJECT_PROPERTY = 'n';\nconst CHANGED_PROPERTY = 'g';\nconst HAS_KEY_PROPERTY = 'h';\nconst ALL_OWN_KEYS_PROPERTY = 'w';\nconst HAS_OWN_KEY_PROPERTY = 'o';\nconst KEYS_PROPERTY = 'k';\n\n// function to create a new bare proxy\nlet newProxy = <T extends object>(\n  target: T,\n  handler: ProxyHandler<T>,\n) => new Proxy(target, handler);\n\n// get object prototype\nconst getProto = Object.getPrototypeOf;\n\nconst objectsToTrack = new WeakMap<object, boolean>();\n\n// check if obj is a plain object or an array\nconst isObjectToTrack = <T>(obj: T): obj is T extends object ? T : never => (\n  obj && (objectsToTrack.has(obj as unknown as object)\n    ? objectsToTrack.get(obj as unknown as object) as boolean\n    : (getProto(obj) === Object.prototype || getProto(obj) === Array.prototype)\n  )\n);\n\n// check if it is object\nconst isObject = (x: unknown): x is object => (\n  typeof x === 'object' && x !== null\n);\n\n// check if frozen\nconst isFrozen = (obj: object) => (\n  Object.isFrozen(obj) || (\n    // Object.isFrozen() doesn't detect non-writable properties\n    // See: https://github.com/dai-shi/proxy-compare/pull/8\n    Object.values(Object.getOwnPropertyDescriptors(obj)).some(\n      (descriptor) => !descriptor.writable,\n    )\n  )\n);\n\n// copy frozen object\nconst unfreeze = <T extends object>(obj: T): T => {\n  if (Array.isArray(obj)) {\n    // Arrays need a special way to copy\n    return Array.from(obj) as T;\n  }\n  // For non-array objects, we create a new object keeping the prototype\n  // with changing all configurable options (otherwise, proxies will complain)\n  const descriptors = Object.getOwnPropertyDescriptors(obj);\n  Object.values(descriptors).forEach((desc) => { desc.configurable = true; });\n  return Object.create(getProto(obj), descriptors);\n};\n\ntype HasKeySet = Set<string | symbol>\ntype HasOwnKeySet = Set<string | symbol>\ntype KeysSet = Set<string | symbol>\ntype Used = {\n  [HAS_KEY_PROPERTY]?: HasKeySet;\n  [ALL_OWN_KEYS_PROPERTY]?: true;\n  [HAS_OWN_KEY_PROPERTY]?: HasOwnKeySet;\n  [KEYS_PROPERTY]?: KeysSet;\n};\ntype Affected = WeakMap<object, Used>;\ntype ProxyHandlerState<T extends object> = {\n  readonly [FROZEN_PROPERTY]: boolean;\n  [PROXY_PROPERTY]?: T;\n  [PROXY_CACHE_PROPERTY]?: ProxyCache<object> | undefined;\n  [AFFECTED_PROPERTY]?: Affected;\n}\ntype ProxyCache<T extends object> = WeakMap<\n  object,\n  readonly [ProxyHandler<T>, ProxyHandlerState<T>]\n>;\n\nconst createProxyHandler = <T extends object>(origObj: T, frozen: boolean) => {\n  const state: ProxyHandlerState<T> = {\n    [FROZEN_PROPERTY]: frozen,\n  };\n  let trackObject = false; // for trackMemo\n  const recordUsage = (\n    type:\n      | typeof HAS_KEY_PROPERTY\n      | typeof ALL_OWN_KEYS_PROPERTY\n      | typeof HAS_OWN_KEY_PROPERTY\n      | typeof KEYS_PROPERTY,\n    key?: string | symbol,\n  ) => {\n    if (!trackObject) {\n      let used = (state[AFFECTED_PROPERTY] as Affected).get(origObj);\n      if (!used) {\n        used = {};\n        (state[AFFECTED_PROPERTY] as Affected).set(origObj, used);\n      }\n      if (type === ALL_OWN_KEYS_PROPERTY) {\n        used[ALL_OWN_KEYS_PROPERTY] = true;\n      } else {\n        let set = used[type];\n        if (!set) {\n          set = new Set();\n          used[type] = set;\n        }\n        set.add(key as string | symbol);\n      }\n    }\n  };\n  const recordObjectAsUsed = () => {\n    trackObject = true;\n    (state[AFFECTED_PROPERTY] as Affected).delete(origObj);\n  };\n  const handler: ProxyHandler<T> = {\n    get(target, key) {\n      if (key === GET_ORIGINAL_SYMBOL) {\n        return origObj;\n      }\n      recordUsage(KEYS_PROPERTY, key);\n      return createProxy(\n        Reflect.get(target, key),\n        (state[AFFECTED_PROPERTY] as Affected),\n        state[PROXY_CACHE_PROPERTY],\n      );\n    },\n    has(target, key) {\n      if (key === TRACK_MEMO_SYMBOL) {\n        recordObjectAsUsed();\n        return true;\n      }\n      recordUsage(HAS_KEY_PROPERTY, key);\n      return Reflect.has(target, key);\n    },\n    getOwnPropertyDescriptor(target, key) {\n      recordUsage(HAS_OWN_KEY_PROPERTY, key);\n      return Reflect.getOwnPropertyDescriptor(target, key);\n    },\n    ownKeys(target) {\n      recordUsage(ALL_OWN_KEYS_PROPERTY);\n      return Reflect.ownKeys(target);\n    },\n  };\n  if (frozen) {\n    handler.set = handler.deleteProperty = () => false;\n  }\n  return [handler, state] as const;\n};\n\nconst getOriginalObject = <T extends object>(obj: T) => (\n  // unwrap proxy\n  (obj as { [GET_ORIGINAL_SYMBOL]?: typeof obj })[GET_ORIGINAL_SYMBOL]\n  // otherwise\n  || obj\n);\n\n/**\n * Create a proxy.\n *\n * This function will create a proxy at top level and proxy nested objects as you access them,\n * in order to keep track of which properties were accessed via get/has proxy handlers:\n *\n * NOTE: Printing of WeakMap is hard to inspect and not very readable\n * for this purpose you can use the `affectedToPathList` helper.\n *\n * @param {object} obj - Object that will be wrapped on the proxy.\n * @param {WeakMap<object, unknown>} affected -\n * WeakMap that will hold the tracking of which properties in the proxied object were accessed.\n * @param {WeakMap<object, unknown>} [proxyCache] -\n * WeakMap that will help keep referential identity for proxies.\n * @returns {Proxy<object>} - Object wrapped in a proxy.\n *\n * @example\n * import { createProxy } from 'proxy-compare';\n *\n * const original = { a: \"1\", c: \"2\", d: { e: \"3\" } };\n * const affected = new WeakMap();\n * const proxy = createProxy(original, affected);\n *\n * proxy.a // Will mark as used and track its value.\n * // This will update the affected WeakMap with original as key\n * // and a Set with \"a\"\n *\n * proxy.d // Will mark \"d\" as accessed to track and proxy itself ({ e: \"3\" }).\n * // This will update the affected WeakMap with original as key\n * // and a Set with \"d\"\n */\nexport const createProxy = <T>(\n  obj: T,\n  affected: WeakMap<object, unknown>,\n  proxyCache?: WeakMap<object, unknown>,\n): T => {\n  if (!isObjectToTrack(obj)) return obj;\n  const target = getOriginalObject(obj);\n  const frozen = isFrozen(target);\n  let handlerAndState = (\n    proxyCache && (proxyCache as ProxyCache<typeof target>).get(target)\n  );\n  if (!handlerAndState || handlerAndState[1][FROZEN_PROPERTY] !== frozen) {\n    handlerAndState = createProxyHandler<typeof target>(target, frozen);\n    handlerAndState[1][PROXY_PROPERTY] = newProxy(\n      frozen ? unfreeze(target) : target,\n      handlerAndState[0],\n    );\n    if (proxyCache) {\n      proxyCache.set(target, handlerAndState);\n    }\n  }\n  handlerAndState[1][AFFECTED_PROPERTY] = affected as Affected;\n  handlerAndState[1][PROXY_CACHE_PROPERTY] = proxyCache as ProxyCache<object> | undefined;\n  return handlerAndState[1][PROXY_PROPERTY] as typeof target;\n};\n\nconst isAllOwnKeysChanged = (prevObj: object, nextObj: object) => {\n  const prevKeys = Reflect.ownKeys(prevObj);\n  const nextKeys = Reflect.ownKeys(nextObj);\n  return prevKeys.length !== nextKeys.length\n    || prevKeys.some((k, i) => k !== nextKeys[i]);\n};\n\ntype ChangedCache = WeakMap<object, {\n  [NEXT_OBJECT_PROPERTY]: object;\n  [CHANGED_PROPERTY]: boolean;\n}>;\n\n/**\n * Compare changes on objects.\n *\n * This will compare the affected properties on tracked objects inside the proxy\n * to check if there were any changes made to it,\n * by default if no property was accessed on the proxy it will attempt to do a\n * reference equality check for the objects provided (Object.is(a, b)). If you access a property\n * on the proxy, then isChanged will only compare the affected properties.\n *\n * @param {object} prevObj - The previous object to compare.\n * @param {object} nextObj - Object to compare with the previous one.\n * @param {WeakMap<object, unknown>} affected -\n * WeakMap that holds the tracking of which properties in the proxied object were accessed.\n * @param {WeakMap<object, unknown>} [cache] -\n * WeakMap that holds a cache of the comparisons for better performance with repetitive comparisons,\n * and to avoid infinite loop with circular structures.\n * @returns {boolean} - Boolean indicating if the affected property on the object has changed.\n *\n * @example\n * import { createProxy, isChanged } from 'proxy-compare';\n *\n * const obj = { a: \"1\", c: \"2\", d: { e: \"3\" } };\n * const affected = new WeakMap();\n *\n * const proxy = createProxy(obj, affected);\n *\n * proxy.a\n *\n * isChanged(obj, { a: \"1\" }, affected) // false\n *\n * proxy.a = \"2\"\n *\n * isChanged(obj, { a: \"1\" }, affected) // true\n */\n\nexport const isChanged = (\n  prevObj: unknown,\n  nextObj: unknown,\n  affected: WeakMap<object, unknown>,\n  cache?: WeakMap<object, unknown>,\n): boolean => {\n  if (Object.is(prevObj, nextObj)) {\n    return false;\n  }\n  if (!isObject(prevObj) || !isObject(nextObj)) return true;\n  const used = (affected as Affected).get(getOriginalObject(prevObj));\n  if (!used) return true;\n  if (cache) {\n    const hit = (cache as ChangedCache).get(prevObj);\n    if (hit && hit[NEXT_OBJECT_PROPERTY] === nextObj) {\n      return hit[CHANGED_PROPERTY];\n    }\n    // for object with cycles\n    (cache as ChangedCache).set(prevObj, {\n      [NEXT_OBJECT_PROPERTY]: nextObj,\n      [CHANGED_PROPERTY]: false,\n    });\n  }\n  let changed: boolean | null = null;\n  try {\n    for (const key of used[HAS_KEY_PROPERTY] || []) {\n      changed = Reflect.has(prevObj, key) !== Reflect.has(nextObj, key);\n      if (changed) return changed;\n    }\n    if (used[ALL_OWN_KEYS_PROPERTY] === true) {\n      changed = isAllOwnKeysChanged(prevObj, nextObj);\n      if (changed) return changed;\n    } else {\n      for (const key of used[HAS_OWN_KEY_PROPERTY] || []) {\n        const hasPrev = !!Reflect.getOwnPropertyDescriptor(prevObj, key);\n        const hasNext = !!Reflect.getOwnPropertyDescriptor(nextObj, key);\n        changed = hasPrev !== hasNext;\n        if (changed) return changed;\n      }\n    }\n    for (const key of used[KEYS_PROPERTY] || []) {\n      changed = isChanged(\n        (prevObj as any)[key],\n        (nextObj as any)[key],\n        affected,\n        cache,\n      );\n      if (changed) return changed;\n    }\n    if (changed === null) changed = true;\n    return changed;\n  } finally {\n    if (cache) {\n      cache.set(prevObj, {\n        [NEXT_OBJECT_PROPERTY]: nextObj,\n        [CHANGED_PROPERTY]: changed,\n      });\n    }\n  }\n};\n\n// explicitly track object with memo\nexport const trackMemo = (obj: unknown) => {\n  if (isObjectToTrack(obj)) {\n    return TRACK_MEMO_SYMBOL in obj;\n  }\n  return false;\n};\n\n/**\n * Unwrap proxy to get the original object.\n *\n * Used to retrieve the original object used to create the proxy instance with `createProxy`.\n *\n * @param {Proxy<object>} obj -  The proxy wrapper of the originial object.\n * @returns {object | null} - Return either the unwrapped object if exists.\n *\n * @example\n * import { createProxy, getUntracked } from 'proxy-compare';\n *\n * const original = { a: \"1\", c: \"2\", d: { e: \"3\" } };\n * const affected = new WeakMap();\n *\n * const proxy = createProxy(original, affected);\n * const originalFromProxy = getUntracked(proxy)\n *\n * Object.is(original, originalFromProxy) // true\n * isChanged(original, originalFromProxy, affected) // false\n */\nexport const getUntracked = <T>(obj: T): T | null => {\n  if (isObjectToTrack(obj)) {\n    return (obj as { [GET_ORIGINAL_SYMBOL]?: T })[GET_ORIGINAL_SYMBOL] || null;\n  }\n  return null;\n};\n\n/**\n * Mark object to be tracked.\n *\n * This function marks an object that will be passed into `createProxy`\n * as marked to track or not. By default only Array and Object are marked to track,\n * so this is useful for example to mark a class instance to track or to mark a object\n * to be untracked when creating your proxy.\n *\n * @param obj - Object to mark as tracked or not.\n * @param mark - Boolean indicating whether you want to track this object or not.\n * @returns - No return.\n *\n * @example\n * import { createProxy, markToTrack, isChanged } from 'proxy-compare';\n *\n * const nested = { e: \"3\" }\n *\n * markToTrack(nested, false)\n *\n * const original = { a: \"1\", c: \"2\", d: nested };\n * const affected = new WeakMap();\n *\n * const proxy = createProxy(original, affected);\n *\n * proxy.d.e\n *\n * isChanged(original, { d: { e: \"3\" } }, affected) // true\n */\nexport const markToTrack = (obj: object, mark = true) => {\n  objectsToTrack.set(obj, mark);\n};\n\n/**\n * Convert `affected` to path list\n *\n * `affected` is a weak map which is not printable.\n * This function is can convert it to printable path list.\n * It's for debugging purpose.\n *\n * @param obj - An object that is used with `createProxy`.\n * @param affected - A weak map that is used with `createProxy`.\n * @param onlyWithValues - An optional boolean to exclude object getters.\n * @returns - An array of paths.\n */\nexport const affectedToPathList = (\n  obj: unknown,\n  affected: WeakMap<object, unknown>,\n  onlyWithValues?: boolean,\n) => {\n  const list: (string | symbol)[][] = [];\n  const seen = new WeakSet();\n  const walk = (x: unknown, path?: (string | symbol)[]) => {\n    if (seen.has(x as object)) {\n      // for object with cycles\n      return;\n    }\n    if (isObject(x)) {\n      seen.add(x);\n    }\n    const used = isObject(x) && (affected as Affected).get(getOriginalObject(x));\n    if (used) {\n      used[HAS_KEY_PROPERTY]?.forEach((key) => {\n        const segment = `:has(${String(key)})`;\n        list.push(path ? [...path, segment] : [segment]);\n      });\n      if (used[ALL_OWN_KEYS_PROPERTY] === true) {\n        const segment = ':ownKeys';\n        list.push(path ? [...path, segment] : [segment]);\n      } else {\n        used[HAS_OWN_KEY_PROPERTY]?.forEach((key) => {\n          const segment = `:hasOwn(${String(key)})`;\n          list.push(path ? [...path, segment] : [segment]);\n        });\n      }\n      used[KEYS_PROPERTY]?.forEach((key) => {\n        if (!onlyWithValues || 'value' in (Object.getOwnPropertyDescriptor(x, key) || {})) {\n          walk((x as any)[key], path ? [...path, key] : [key]);\n        }\n      });\n    } else if (path) {\n      list.push(path);\n    }\n  };\n  walk(obj);\n  return list;\n};\n\n/**\n * replace newProxy function.\n *\n * This can be used if you want to use proxy-polyfill.\n * Note that proxy-polyfill can't polyfill everything.\n * Use it at your own risk.\n */\nexport const replaceNewProxy = (fn: typeof newProxy) => {\n  newProxy = fn;\n};\n"],"names":["Symbol","AFFECTED_PROPERTY","newProxy","target","handler","Proxy","Object","getPrototypeOf","objectsToTrack","WeakMap","isObjectToTrack","obj","has","get","getProto","prototype","Array","isObject","x","getOriginalObject","GET_ORIGINAL_SYMBOL","affected","proxyCache","frozen","isFrozen","values","getOwnPropertyDescriptors","some","descriptor","writable","handlerAndState","origObj","state","f","trackObject","type","key","used","set","ALL_OWN_KEYS_PROPERTY","add","recordUsage","createProxy","Reflect","TRACK_MEMO_SYMBOL","delete","getOwnPropertyDescriptor","ownKeys","deleteProperty","createProxyHandler","isArray","from","descriptors","forEach","desc","configurable","create","unfreeze","isChanged","prevObj","nextObj","cache","is","hit","n","g","changed","prevKeys","nextKeys","length","k","i","isAllOwnKeysChanged","trackMemo","markToTrack","mark","affectedToPathList","onlyWithValues","seen","path","_used$HAS_KEY_PROPERT","_used$KEYS_PROPERTY","segment","String","list","push","_used$HAS_OWN_KEY_PRO","walk","replaceNewProxy","fn"],"mappings":"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"}